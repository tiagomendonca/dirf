% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/weights.R
\name{weights}
\alias{weights}
\title{weights}
\usage{
weights(node, nodes_base, nodes_dist, h = 0.01)
}
\arguments{
\item{node}{A numeric vector of terminal nodes from observations for which weights are to be calculated,
with one value per tree.}

\item{nodes_base}{A \code{data.table} containing the terminal nodes of the training dataset for each tree in the Random Forest.
Must include the columns:
\itemize{
\item \code{obs}: Observation index from the training dataset.
\item \code{tree}: Tree index.
\item \code{node1}: Terminal node for the observation in the respective tree.
}}

\item{nodes_dist}{A \code{data.table} containing the distances between terminal nodes, typically generated using the \code{distances} function.
Must include the columns:
\itemize{
\item \code{node1}: The first node in the pair.
\item \code{node2}: The second node in the pair.
\item \code{dist}: Distance between the two nodes.
}}

\item{h}{A numeric value representing the weighting parameter, controlling the influence of distances
on the calculation. Default is \code{0.01}.}
}
\value{
A numeric vector of standardized weights (K values), summing to 1. The weights reflect the relative influence
of training observations on the given prediction, based on their proximity in the Random Forest structure.
}
\description{
Calculates the standardized weights (K values) for predictions based on the distance between nodes.
This function normalizes the distances, applies a Gaussian kernel weighting scheme, and ensures
the weights sum to 1.
}
\examples{
# Generate example data
set.seed(123)
df1 <- tibble::tibble(
  x1 = runif(20, 0, 1),
  x2 = rnorm(20, 0, 1),
  y = 2 * x1 + 1.5 * x2 + rnorm(20, 0, 1)
)

df2 <- tibble::tibble(
  x1 = runif(20, 0, 1),
  x2 = rnorm(20, 0, 1),
  y = 2 * x1 + 1.5 * x2 + rnorm(20, 0, 1)
)

# Train a Random Forest model
rf <- ranger::ranger(
  y ~ .,
  data = df1,
  max.depth = 5,
  num.trees = 10,
  write.forest = TRUE
)

# Get terminal nodes for training and new data
predicted1 <- predict(rf, df1, type = 'terminalNodes')$predictions
predicted2 <- predict(rf, df2, type = 'terminalNodes')$predictions

# Compute distances between nodes
nodes_distances_rf <- distances(rf)

# Prepare base data for prediction
base_prediction <- data.table::data.table(
  obs = rep(1:nrow(predicted1), each = rf$num.trees),
  tree = rep(1:rf$num.trees, nrow(df1)),
  node1 = as.vector(t(predicted1))
)

# Calculate weights for the first observation in df2
weight_values <- weights(
  node = predicted2[1, ],
  nodes_base = base_prediction,
  nodes_dist = nodes_distances_rf,
  h = 0.1
)
print(weight_values)

}
