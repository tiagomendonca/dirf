valores %>%
ggplot(aes(h, w, group = id, color = factor(id))) +
geom_line() +
labs(x = "hiperparâmetro h", y = "w (peso)") +
theme_bw() +
theme(legend.position = "none")
valores
library(dirf)
library(tidyverse)
set.seed(123)
df1 <- tibble::tibble(x1 = runif(20, 0, 1),
x2 = rnorm(20, 0, 1),
y = 2*x1 + 1.5*x2 + rnorm(20, 0, 1))
df2 <- tibble::tibble(x1 = runif(1, 0, 1),
x2 = rnorm(1, 0, 1),
y = 2*x1 + 1.5*x2 + rnorm(1, 0, 1))
rf <- ranger::ranger(y ~ ., max.depth = 5, write.forest = TRUE, data = df1,
num.trees = 10)
predicted1 <- predict(rf, df1, type = 'terminalNodes')$predictions
predicted2 <- predict(rf, df2, type = 'terminalNodes')$predictions
nodes_distances_rf <- distances(rf)
base_prediction <- data.table::data.table(obs = rep(1:nrow(predicted1),
each = rf$num.trees),
tree = rep(1:rf$num.trees,
nrow(df1)),
node1 = as.vector(t(predicted1)))
valores <- tibble()
h_valores <- c(seq(0.003, 0.009, 0.001), seq(0.01, 0.04, 0.0025), seq(0.05, 2, 0.025))
for (i in h_valores) {
valores <- valores %>%
bind_rows(tibble(h = i,
id = 1:nrow(predicted1),
w = weights(predicted2[1,], base_prediction, nodes_distances_rf, h = i)))
}
valores %>%
ggplot(aes(h, w, group = id, color = factor(id))) +
geom_line() +
labs(x = "hiperparâmetro h", y = "w (peso)") +
theme_bw() +
theme(legend.position = "none")
valores %>%
ggplot(aes(h, w, group = id, color = factor(id))) +
geom_line() +
labs(x = "hiperparâmetro h", y = "w (peso)") +
scale_x_log10() +
theme_bw() +
theme(legend.position = "none")
valores %>%
ggplot(aes(h, w, group = id, color = factor(id))) +
geom_line() +
labs(x = "hiperparâmetro h", y = "w (peso)") +
# scale_x_log10() +
theme_bw() +
theme(legend.position = "none")
library(dirf)
library(tidyverse)
set.seed(123)
df1 <- tibble::tibble(x1 = runif(20, 0, 1),
x2 = rnorm(20, 0, 1),
y = 2*x1 + 1.5*x2 + rnorm(20, 0, 1))
df2 <- tibble::tibble(x1 = runif(1, 0, 1),
x2 = rnorm(1, 0, 1),
y = 2*x1 + 1.5*x2 + rnorm(1, 0, 1))
rf <- ranger::ranger(y ~ ., max.depth = 5, write.forest = TRUE, data = df1,
num.trees = 10)
predicted1 <- predict(rf, df1, type = 'terminalNodes')$predictions
predicted2 <- predict(rf, df2, type = 'terminalNodes')$predictions
nodes_distances_rf <- distances(rf)
base_prediction <- data.table::data.table(obs = rep(1:nrow(predicted1),
each = rf$num.trees),
tree = rep(1:rf$num.trees,
nrow(df1)),
node1 = as.vector(t(predicted1)))
valores <- tibble()
h_valores <- c(seq(0.003, 0.009, 0.001), seq(0.01, 0.04, 0.0025), seq(0.05, 1, 0.025))
for (i in h_valores) {
valores <- valores %>%
bind_rows(tibble(h = i,
id = 1:nrow(predicted1),
w = weights(predicted2[1,], base_prediction, nodes_distances_rf, h = i)))
}
valores %>%
ggplot(aes(h, w, group = id, color = factor(id))) +
geom_line() +
labs(x = "hiperparâmetro h", y = "w (peso)") +
# scale_x_log10() +
theme_bw() +
theme(legend.position = "none")
valores
valores %>% print(n = 20)
e+  0
e+0
valores$w[14]
library(dirf)
library(tidyverse)
n_tr <- 20
set.seed(123)
df1 <- tibble::tibble(x1 = runif(n_tr, 0, 1),
x2 = rnorm(n_tr, 0, 1),
y = 2*x1 + 1.5*x2 + rnorm(n_tr, 0, 1))
df2 <- tibble::tibble(x1 = runif(1, 0, 1),
x2 = rnorm(1, 0, 1),
y = 2*x1 + 1.5*x2 + rnorm(1, 0, 1))
rf <- ranger::ranger(y ~ ., max.depth = 5, write.forest = TRUE, data = df1,
num.trees = 50)
predicted1 <- predict(rf, df1, type = 'terminalNodes')$predictions
predicted2 <- predict(rf, df2, type = 'terminalNodes')$predictions
nodes_distances_rf <- distances(rf)
base_prediction <- data.table::data.table(obs = rep(1:nrow(predicted1),
each = rf$num.trees),
tree = rep(1:rf$num.trees,
nrow(df1)),
node1 = as.vector(t(predicted1)))
valores <- tibble()
h_valores <- c(seq(0.003, 0.009, 0.001), seq(0.01, 0.04, 0.0025), seq(0.05, 1, 0.025))
for (i in h_valores) {
valores <- valores %>%
bind_rows(tibble(h = i,
id = 1:nrow(predicted1),
w = weights(predicted2[1,], base_prediction, nodes_distances_rf, h = i)))
}
valores %>%
ggplot(aes(h, w, group = id, color = factor(id))) +
geom_line() +
labs(x = "hiperparâmetro h", y = "w (peso)") +
# scale_x_log10() +
theme_bw() +
theme(legend.position = "none")
library(dirf)
library(tidyverse)
n_tr <- 20
set.seed(123)
df1 <- tibble::tibble(x1 = runif(n_tr, 0, 1),
x2 = rnorm(n_tr, 0, 1),
y = 2*x1 + 1.5*x2 + rnorm(n_tr, 0, 1))
df2 <- tibble::tibble(x1 = runif(1, 0, 1),
x2 = rnorm(1, 0, 1),
y = 2*x1 + 1.5*x2 + rnorm(1, 0, 1))
rf <- ranger::ranger(y ~ ., max.depth = 5, write.forest = TRUE, data = df1,
num.trees = 50)
predicted1 <- predict(rf, df1, type = 'terminalNodes')$predictions
predicted2 <- predict(rf, df2, type = 'terminalNodes')$predictions
nodes_distances_rf <- distances(rf)
base_prediction <- data.table::data.table(obs = rep(1:nrow(predicted1),
each = rf$num.trees),
tree = rep(1:rf$num.trees,
nrow(df1)),
node1 = as.vector(t(predicted1)))
valores <- tibble()
h_valores <- c(seq(0.003, 0.009, 0.001), seq(0.01, 0.04, 0.0025), seq(0.05, 1, 0.02))
for (i in h_valores) {
valores <- valores %>%
bind_rows(tibble(h = i,
id = 1:nrow(predicted1),
w = weights(predicted2[1,], base_prediction, nodes_distances_rf, h = i)))
}
valores %>%
ggplot(aes(h, w, group = id, color = factor(id))) +
geom_line() +
labs(x = "hiperparâmetro h", y = "w (peso)") +
# scale_x_log10() +
theme_bw() +
theme(legend.position = "none")
library(dirf)
library(tidyverse)
n_tr <- 20
set.seed(123)
df1 <- tibble::tibble(x1 = runif(n_tr, 0, 1),
x2 = rnorm(n_tr, 0, 1),
y = 2*x1 + 1.5*x2 + rnorm(n_tr, 0, 1))
df2 <- tibble::tibble(x1 = runif(1, 0, 1),
x2 = rnorm(1, 0, 1),
y = 2*x1 + 1.5*x2 + rnorm(1, 0, 1))
rf <- ranger::ranger(y ~ ., max.depth = 5, write.forest = TRUE, data = df1,
num.trees = 50)
predicted1 <- predict(rf, df1, type = 'terminalNodes')$predictions
predicted2 <- predict(rf, df2, type = 'terminalNodes')$predictions
nodes_distances_rf <- distances(rf)
base_prediction <- data.table::data.table(obs = rep(1:nrow(predicted1),
each = rf$num.trees),
tree = rep(1:rf$num.trees,
nrow(df1)),
node1 = as.vector(t(predicted1)))
valores <- tibble()
h_valores <- c(seq(0.003, 0.009, 0.001), seq(0.01, 0.04, 0.0025), seq(0.05, 1, 0.01))
for (i in h_valores) {
valores <- valores %>%
bind_rows(tibble(h = i,
id = 1:nrow(predicted1),
w = weights(predicted2[1,], base_prediction, nodes_distances_rf, h = i)))
}
valores %>%
ggplot(aes(h, w, group = id, color = factor(id))) +
geom_line() +
labs(x = "hiperparâmetro h", y = "w (peso)") +
# scale_x_log10() +
theme_bw() +
theme(legend.position = "none")
library(dirf)
library(tidyverse)
n_tr <- 100
set.seed(123)
df1 <- tibble::tibble(x1 = runif(n_tr, 0, 1),
x2 = rnorm(n_tr, 0, 1),
y = 2*x1 + 1.5*x2 + rnorm(n_tr, 0, 1))
df2 <- tibble::tibble(x1 = runif(1, 0, 1),
x2 = rnorm(1, 0, 1),
y = 2*x1 + 1.5*x2 + rnorm(1, 0, 1))
rf <- ranger::ranger(y ~ ., max.depth = 5, write.forest = TRUE, data = df1,
num.trees = 50)
predicted1 <- predict(rf, df1, type = 'terminalNodes')$predictions
predicted2 <- predict(rf, df2, type = 'terminalNodes')$predictions
nodes_distances_rf <- distances(rf)
base_prediction <- data.table::data.table(obs = rep(1:nrow(predicted1),
each = rf$num.trees),
tree = rep(1:rf$num.trees,
nrow(df1)),
node1 = as.vector(t(predicted1)))
valores <- tibble()
h_valores <- c(seq(0.003, 0.009, 0.001), seq(0.01, 0.04, 0.0025), seq(0.05, 1, 0.01))
for (i in h_valores) {
valores <- valores %>%
bind_rows(tibble(h = i,
id = 1:nrow(predicted1),
w = weights(predicted2[1,], base_prediction, nodes_distances_rf, h = i)))
}
valores %>%
ggplot(aes(h, w, group = id, color = factor(id))) +
geom_line() +
labs(x = "hiperparâmetro h", y = "w (peso)") +
# scale_x_log10() +
theme_bw() +
theme(legend.position = "none")
library(dirf)
library(tidyverse)
n_tr <- 100
set.seed(123)
df1 <- tibble::tibble(x1 = runif(n_tr, 0, 1),
x2 = rnorm(n_tr, 0, 1),
y = 2*x1 + 1.5*x2 + rnorm(n_tr, 0, 1))
df2 <- tibble::tibble(x1 = runif(1, 0, 1),
x2 = rnorm(1, 0, 1),
y = 2*x1 + 1.5*x2 + rnorm(1, 0, 1))
rf <- ranger::ranger(y ~ ., max.depth = 5, write.forest = TRUE, data = df1,
num.trees = 50)
predicted1 <- predict(rf, df1, type = 'terminalNodes')$predictions
predicted2 <- predict(rf, df2, type = 'terminalNodes')$predictions
nodes_distances_rf <- distances(rf)
base_prediction <- data.table::data.table(obs = rep(1:nrow(predicted1),
each = rf$num.trees),
tree = rep(1:rf$num.trees,
nrow(df1)),
node1 = as.vector(t(predicted1)))
valores <- tibble()
h_valores <- c(seq(0.003, 0.009, 0.001), seq(0.01, 0.04, 0.0025), seq(0.05, 1, 0.01))
for (i in h_valores) {
valores <- valores %>%
bind_rows(tibble(h = i,
id = 1:nrow(predicted1),
w = weights(predicted2[1,], base_prediction, nodes_distances_rf, h = i)))
}
valores %>%
ggplot(aes(h, w, group = id, color = factor(id))) +
geom_line() +
labs(x = "hiperparâmetro h", y = "w (peso)") +
scale_x_log10() +
theme_bw() +
theme(legend.position = "none")
valores %>%
ggplot(aes(h, w, group = id, color = factor(id))) +
geom_line() +
labs(x = "hiperparâmetro h", y = "w (peso)") +
# scale_x_log10() +
theme_bw() +
theme(legend.position = "none")
library(dirf)
library(tidyverse)
n_tr <- 50
set.seed(123)
df1 <- tibble::tibble(x1 = runif(n_tr, 0, 1),
x2 = rnorm(n_tr, 0, 1),
y = 2*x1 + 1.5*x2 + rnorm(n_tr, 0, 1))
df2 <- tibble::tibble(x1 = runif(1, 0, 1),
x2 = rnorm(1, 0, 1),
y = 2*x1 + 1.5*x2 + rnorm(1, 0, 1))
rf <- ranger::ranger(y ~ ., max.depth = 5, write.forest = TRUE, data = df1,
num.trees = 50)
predicted1 <- predict(rf, df1, type = 'terminalNodes')$predictions
predicted2 <- predict(rf, df2, type = 'terminalNodes')$predictions
nodes_distances_rf <- distances(rf)
base_prediction <- data.table::data.table(obs = rep(1:nrow(predicted1),
each = rf$num.trees),
tree = rep(1:rf$num.trees,
nrow(df1)),
node1 = as.vector(t(predicted1)))
valores <- tibble()
h_valores <- c(seq(0.003, 0.009, 0.001), seq(0.01, 0.04, 0.0025), seq(0.05, 1, 0.01))
for (i in h_valores) {
valores <- valores %>%
bind_rows(tibble(h = i,
id = 1:nrow(predicted1),
w = weights(predicted2[1,], base_prediction, nodes_distances_rf, h = i)))
}
valores %>%
ggplot(aes(h, w, group = id, color = factor(id))) +
geom_line() +
labs(x = "hiperparâmetro h", y = "w (peso)") +
# scale_x_log10() +
theme_bw() +
theme(legend.position = "none")
valores %>%
ggplot(aes(h, w, group = id, color = factor(id))) +
geom_line() +
labs(x = "hiperparâmetro h", y = "w (peso)") +
# scale_x_log10() +
scale_x_continuous(breaks = seq(0, 1, 0.1)) +
theme_bw() +
theme(legend.position = "none")
library(dirf)
library(tidyverse)
n_tr <- 50
set.seed(24)
df1 <- tibble::tibble(x1 = runif(n_tr, 0, 1),
x2 = rnorm(n_tr, 0, 1),
y = 2*x1 + 1.5*x2 + rnorm(n_tr, 0, 1))
df2 <- tibble::tibble(x1 = runif(1, 0, 1),
x2 = rnorm(1, 0, 1),
y = 2*x1 + 1.5*x2 + rnorm(1, 0, 1))
rf <- ranger::ranger(y ~ ., max.depth = 5, write.forest = TRUE, data = df1,
num.trees = 50)
predicted1 <- predict(rf, df1, type = 'terminalNodes')$predictions
predicted2 <- predict(rf, df2, type = 'terminalNodes')$predictions
nodes_distances_rf <- distances(rf)
base_prediction <- data.table::data.table(obs = rep(1:nrow(predicted1),
each = rf$num.trees),
tree = rep(1:rf$num.trees,
nrow(df1)),
node1 = as.vector(t(predicted1)))
valores <- tibble()
h_valores <- c(seq(0.003, 0.009, 0.001), seq(0.01, 0.04, 0.0025), seq(0.05, 1, 0.01))
for (i in h_valores) {
valores <- valores %>%
bind_rows(tibble(h = i,
id = 1:nrow(predicted1),
w = weights(predicted2[1,], base_prediction, nodes_distances_rf, h = i)))
}
valores %>%
ggplot(aes(h, w, group = id, color = factor(id))) +
geom_line() +
labs(x = "hiperparâmetro h", y = "w (peso)") +
# scale_x_log10() +
scale_x_continuous(breaks = seq(0, 1, 0.1)) +
theme_bw() +
theme(legend.position = "none")
setwd("D:/OneDrive/dirf")
setwd("D:/OneDrive/Convert/defesa")
fig <- valores %>%
ggplot(aes(h, w, group = id, color = factor(id))) +
geom_line() +
labs(x = "hiperparâmetro h", y = "w (peso)") +
# scale_x_log10() +
scale_x_continuous(breaks = seq(0, 1, 0.1)) +
theme_bw() +
theme(legend.position = "none")
fig <- valores %>%
ggplot(aes(h, w, group = id, color = factor(id))) +
geom_line() +
labs(x = "hiperparâmetro h", y = "w (peso)") +
# scale_x_log10() +
scale_x_continuous(breaks = seq(0, 1, 0.1)) +
theme_bw() +
theme(legend.position = "none")
ggsave("h_pesos.png", fig, width = 18, height = 9, dpi = 100)
ggsave("figures/h_pesos.png", fig, width = 18, height = 9, dpi = 100)
fig <- valores %>%
ggplot(aes(h, w, group = id, color = factor(id))) +
geom_line() +
labs(x = "hiperparâmetro h", y = "w (peso)") +
# scale_x_log10() +
scale_x_continuous(breaks = seq(0, 1, 0.1)) +
theme_bw() +
theme(legend.position = "none",
text = element_text(size = 15))
ggsave("figures/h_pesos.png", fig, width = 18, height = 9, dpi = 100)
fig <- valores %>%
ggplot(aes(h, w, group = id, color = factor(id))) +
geom_line() +
labs(x = "hiperparâmetro h", y = "w (peso)") +
# scale_x_log10() +
scale_x_continuous(breaks = seq(0, 1, 0.1)) +
theme_bw() +
theme(legend.position = "none",
text = element_text(size = 20))
ggsave("figures/h_pesos.png", fig, width = 18, height = 9, dpi = 100)
friedman <- function(n, ruido = 0, sigma = 1, seed_num = 22) {
set.seed(seed_num)
dados <- tibble(x1 = runif(n),
x2 = runif(n),
x3 = runif(n),
x4 = runif(n),
x5 = runif(n)) %>%
mutate(y = 10 * sin(pi * x1 * x2) + 20 * (x3 - 0.5)^2 + 10 * x4 + 5 * x5 + rnorm(n, 0, sigma)) %>%
select(y, x1:x5)
if(ruido >= 1) {
var_ruido <- matrix(runif(n * ruido), ncol = ruido)
colnames(var_ruido) <- paste0("x", 6:(5 + ruido))
dados <- dados %>%
bind_cols(as_tibble(var_ruido))
}
return(dados)
}
beta <-  c(-2.5, -2, 3, 4)
friedman <- function(n, ruido = 0, sigma = 1, seed_num = 22) {
set.seed(seed_num)
dados <- tibble(x1 = runif(n),
x2 = runif(n),
x3 = runif(n),
x4 = runif(n),
x5 = runif(n)) %>%
mutate(y = 10 * sin(pi * x1 * x2) + 20 * (x3 - 0.5)^2 + 10 * x4 + 5 * x5 + rnorm(n, 0, sigma)) %>%
select(y, x1:x5)
if(ruido >= 1) {
var_ruido <- matrix(runif(n * ruido), ncol = ruido)
colnames(var_ruido) <- paste0("x", 6:(5 + ruido))
dados <- dados %>%
bind_cols(as_tibble(var_ruido))
}
return(dados)
}
beta <-  c(-2.5, -2, 3, 4)
n_tr <- 300
n_test <- 1
set.seed(24)
df1 <- friedman(n = n_tr, ruido = 50, sigma = 1, seed_num = runif(1, 1, 1000))
df2 <- friedman(n = n_test, ruido = 50, sigma = 1, seed_num = runif(1, 1, 1000))
rf <- ranger::ranger(y ~ ., max.depth = 5, write.forest = TRUE, data = df1,
num.trees = 50)
predicted1 <- predict(rf, df1, type = 'terminalNodes')$predictions
predicted2 <- predict(rf, df2, type = 'terminalNodes')$predictions
nodes_distances_rf <- distances(rf)
base_prediction <- data.table::data.table(obs = rep(1:nrow(predicted1),
each = rf$num.trees),
tree = rep(1:rf$num.trees,
nrow(df1)),
node1 = as.vector(t(predicted1)))
valores <- tibble()
h_valores <- c(seq(0.003, 0.009, 0.001), seq(0.01, 0.04, 0.0025), seq(0.05, 1, 0.01))
for (i in h_valores) {
valores <- valores %>%
bind_rows(tibble(h = i,
id = 1:nrow(predicted1),
w = weights(predicted2[1,], base_prediction, nodes_distances_rf, h = i)))
}
fig <- valores %>%
ggplot(aes(h, w, group = id, color = factor(id))) +
geom_line() +
labs(x = "hiperparâmetro h", y = "w (peso)") +
# scale_x_log10() +
scale_x_continuous(breaks = seq(0, 1, 0.1)) +
theme_bw() +
theme(legend.position = "none",
text = element_text(size = 20))
(fig <- valores %>%
ggplot(aes(h, w, group = id, color = factor(id))) +
geom_line() +
labs(x = "hiperparâmetro h", y = "w (peso)") +
# scale_x_log10() +
scale_x_continuous(breaks = seq(0, 1, 0.1)) +
theme_bw() +
theme(legend.position = "none",
text = element_text(size = 20)))
beta <-  c(-2.5, -2, 3, 4)
n_tr <- 100
n_test <- 1
set.seed(24)
df1 <- friedman(n = n_tr, ruido = 50, sigma = 1, seed_num = runif(1, 1, 1000))
df2 <- friedman(n = n_test, ruido = 50, sigma = 1, seed_num = runif(1, 1, 1000))
rf <- ranger::ranger(y ~ ., max.depth = 5, write.forest = TRUE, data = df1,
num.trees = 50)
predicted1 <- predict(rf, df1, type = 'terminalNodes')$predictions
predicted2 <- predict(rf, df2, type = 'terminalNodes')$predictions
nodes_distances_rf <- distances(rf)
base_prediction <- data.table::data.table(obs = rep(1:nrow(predicted1),
each = rf$num.trees),
tree = rep(1:rf$num.trees,
nrow(df1)),
node1 = as.vector(t(predicted1)))
valores <- tibble()
h_valores <- c(seq(0.003, 0.009, 0.001), seq(0.01, 0.04, 0.0025), seq(0.05, 1, 0.01))
for (i in h_valores) {
valores <- valores %>%
bind_rows(tibble(h = i,
id = 1:nrow(predicted1),
w = weights(predicted2[1,], base_prediction, nodes_distances_rf, h = i)))
}
(fig <- valores %>%
ggplot(aes(h, w, group = id, color = factor(id))) +
geom_line() +
labs(x = "hiperparâmetro h", y = "w (peso)") +
# scale_x_log10() +
scale_x_continuous(breaks = seq(0, 1, 0.1)) +
theme_bw() +
theme(legend.position = "none",
text = element_text(size = 20)))
?weights
ranbu
prediction_ranbu
prediction_ranbu()
dirf::prediction_ranbu()
base_prediction
?distances
nodes_distances_rf
