// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// prediction_ranbu
arma::colvec prediction_ranbu(arma::mat nodes1, arma::colvec y_base, arma::mat nodes2, double h);
RcppExport SEXP _dirf_prediction_ranbu(SEXP nodes1SEXP, SEXP y_baseSEXP, SEXP nodes2SEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type nodes1(nodes1SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type y_base(y_baseSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type nodes2(nodes2SEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(prediction_ranbu(nodes1, y_base, nodes2, h));
    return rcpp_result_gen;
END_RCPP
}
// stl_sort
NumericVector stl_sort(NumericVector x);
RcppExport SEXP _dirf_stl_sort(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stl_sort(x));
    return rcpp_result_gen;
END_RCPP
}
// quantile_dnrb_aux
Rcpp::NumericMatrix quantile_dnrb_aux(Rcpp::NumericVector quantis, Rcpp::NumericVector y_unique, Rcpp::NumericVector y, Rcpp::NumericVector weights);
RcppExport SEXP _dirf_quantile_dnrb_aux(SEXP quantisSEXP, SEXP y_uniqueSEXP, SEXP ySEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type quantis(quantisSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y_unique(y_uniqueSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(quantile_dnrb_aux(quantis, y_unique, y, weights));
    return rcpp_result_gen;
END_RCPP
}
// quantile_dnrb
Rcpp::NumericMatrix quantile_dnrb(Rcpp::NumericVector quantis, Rcpp::NumericVector y_unique, Rcpp::NumericVector y, Rcpp::NumericMatrix nodes1, Rcpp::NumericMatrix nodes2, double h);
RcppExport SEXP _dirf_quantile_dnrb(SEXP quantisSEXP, SEXP y_uniqueSEXP, SEXP ySEXP, SEXP nodes1SEXP, SEXP nodes2SEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type quantis(quantisSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y_unique(y_uniqueSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type nodes1(nodes1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type nodes2(nodes2SEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(quantile_dnrb(quantis, y_unique, y, nodes1, nodes2, h));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dirf_prediction_ranbu", (DL_FUNC) &_dirf_prediction_ranbu, 4},
    {"_dirf_stl_sort", (DL_FUNC) &_dirf_stl_sort, 1},
    {"_dirf_quantile_dnrb_aux", (DL_FUNC) &_dirf_quantile_dnrb_aux, 4},
    {"_dirf_quantile_dnrb", (DL_FUNC) &_dirf_quantile_dnrb, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_dirf(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
